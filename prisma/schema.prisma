// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id        Int      @id @default(autoincrement())
  balance   Decimal
  interest  Boolean
  type      AccountType
}

model User {
  id          Int      @id @default(autoincrement())
  first_name  String
  last_name   String
  mail        String   @unique
  keycloak_id String   @unique
  accountId   Int
  account     Account  @relation(fields: [accountId], references: [id])
}

model roles {
    id              Int    @id @default(autoincrement())
    name            String? @unique
    keycloak_id     String? @unique
    userId          Int?
    user            User?   @relation(fields: [userId], references: [id])
    // Define permissions for each role and resource
    household       AuthorizationType
    user            AuthorizationType
    help_accounts   AuthorizationType
    bank_accounts   AuthorizationType
    transactions    AuthorizationType
    transactions    AuthorizationType
    advances        AuthorizationType
}

model bank_account {
    id          Int      @id @default(autoincrement())
    name        String
    bank        String
    iban        String   @unique
    bic         String?
    accountId   Int
    account     Account  @relation(fields: [accountId], references: [id])
}

model help_account {
    id          Int      @id @default(autoincrement())
    name        String
    responsibleId Int?
    responsible User?     @relation(fields: [responsibleId], references: [id])
    accountId   Int
    account     Account  @relation(fields: [accountId], references: [id])
}

model household {
    id          Int      @id @default(autoincrement())
    name        String
    description String?
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    state       householdState @default(draft)
}

model costCenter {
    id          Int      @id @default(autoincrement())
    name        String
    description String?
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    earnings_expected Decimal
    costs_expected    Decimal
    earnings_actual   Decimal @default(0)
    costs_actual      Decimal @default(0)
    householdId Int
    household   household @relation(fields: [householdId], references: [id])
}

modle transaction {
    id          Int      @id @default(autoincrement())
    amount      Decimal
    date        DateTime @default(now())
    date_valued DateTime?
    description String
    reference   String?
    account1Negative Boolean @default(false)
    accountId1   Int
    account1     Account  @relation(fields: [accountId], references: [id])
    account1ValueAfter Decimal
    account2Negative? Boolean @default(false)
    accountId2?   Int
    account2?     Account  @relation(fields: [accountId2], references: [id])
    account2ValueAfter? Decimal
    costCenterId Int?
    costCenter  costCenter? @relation(fields: [costCenterId], references: [id])
    attachmentId Int?
    attachment  attachment? @relation(fields: [attachmentId], references: [id])
    transactionBulkId Int?
    transactionBulk  transaction_bulk? @relation(fields: [transactionBulkId], references: [
}

model transaction_bulk {
    id          Int      @id @default(autoincrement())
    date        DateTime @default(now())
    date_valued DateTime?
    description String
    reference   String?
    account1Negative Boolean @default(false)
    accountId1   Int
    costCenterId Int?
    costCenter  costCenter? @relation(fields: [costCenterId], references: [id])
    attachmentId Int?
    attachment  attachment? @relation(fields: [attachmentId], references: [id])
}

model advances {
    id          Int      @id @default(autoincrement())
    amount      Decimal
    date        DateTime @default(now())
    description String
    userId      Int
    user        User     @relation(fields: [userId], references: [id])
    transactionId Int?
    transaction  transaction? @relation(fields: [transactionId], references: [id])
    reviewerId Int?
    reviewer   User?     @relation(fields: [reviewerId], references: [id
    state       advanceState @default(open)
}

model attachment {
    id         Int      @id @default(autoincrement())
    name       String
    mimeType   String
    data       Bytes
}

model mail {
    id          Int      @id @default(autoincrement())
    subject     String
    body        String
    sentAt      DateTime @default(now())
    userId      Int?
    user        User?     @relation(fields: [userId], references: [id])
    addressedTo  String
    attachment String?
}

enum AccountType {
  user
  bank
  help_account
}

enum AuthorizationType {
    none
    read_own
    read_all
    write_all
}

enum householdState {
    draft
    default
    active
    closed
}

enum advanceState {
    open
    accepted
    rejected
}